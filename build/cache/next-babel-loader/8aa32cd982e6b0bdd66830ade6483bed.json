{"ast":null,"code":"const AirtableAPI = {\n  apiKey: \"keym6ehWNZnQzpS4m\",\n  base: \"appq9CwhpYOjOv4tQ\",\n  url: \"https://api.airtable.com/v0/\",\n  init: function ({\n    apiKey,\n    base\n  }) {\n    this.apiKey = apiKey;\n    this.base = base; //const records = await this.fetch(\"Link\");\n\n    return this;\n  },\n  fetch: async function (table) {\n    if (this.apiKey && this.base && table) {\n      const endpoint = `${this.url}${this.base}/${table}?api_key=${this.apiKey}`; //console.log(endpoint);\n\n      const res = await fetch(endpoint, {});\n      const rj = await res.json(); //console.log(\"response\", rj);\n\n      return rj.records;\n    } else return null;\n  }\n};\nconst BookmarksAPI = {\n  tagNames: [],\n  categoryNames: [],\n  records: [],\n  tags: {},\n  categories: {},\n  colors: [//{color:\"rgb(0, 178, 144)\", bg:\"rgba(0, 178, 144, 0.1)\"},\n    //{color:\"rgb(81, 73, 230)\", bg:\"rgba(81, 73, 230, 0.2)\"},\n    //{color:\"rgba(128, 78, 247, 1)\", bg:\"rgba(128, 78, 247,0.35)\"},\n    //{color:\"rgba(251, 45, 45,  1)\", bg:\"rgba(251, 45, 45, 0.15)\"},\n    //{color:\"rgba(243, 167, 46, 1)\", bg:\"rgba(243, 167, 46,0.1)\"}\n  ],\n  activeColor: \"rgba(50,50,50,0.8)\",\n  state: \"All Star\",\n  actives: [],\n  createLayout: function () {\n    const app = document.getElementById(\"app\");\n    app.style.padding = \"32px\"; //banner\n\n    app.innerHTML = `\n      <div class=\"py-5 service-32\" style=\"min-height:300px; display:none;\">\n          <div class=\"container\">\n              <div class=\"row wrap-feature-32\"> \n                  <div class=\"col-md-6\"> <img src=\"https://www.wrappixel.com/demos/ui-kit/wrapkit/assets/images/features/feature32/img1.jpg\" class=\"img-fluid\" width=\"100%\"> </div>\n                  <div class=\"col-md-6 align-self-center\"> \n                                      <span class=\"badge badge-info rounded-pill px-3 py-1 font-weight-light\">Awesome</span>\n                      <h1 class=\"my-3\">Harikulade Linkler</h1>\n                      <p class=\"mt-3\">Browser bookmarklarımı burada paylaşmaya karar verdim. Peyderpey burasını zenginleştireceğim.</p> \n                                      \n                              </div>\n              </div>\n          </div>\n      </div>\n    `;\n    const menu = document.createElement(\"div\");\n    menu.id = \"tag-box\";\n    menu.className = \"Selector\";\n    const gridBox = document.createElement(\"div\");\n    gridBox.id = \"grid-box\";\n    const styleEl = document.createElement(\"style\");\n    styleEl.innerHTML = `\n      body {font-family:Helvetica}\n      div {box-sizing:border-box;}\n      #app {width:100%; display:flex; flex-direction:column; align-items:flex-start; padding:32px 10vw !important;}\n      #app #grid-box {\n        box-sizing:border-box;\n        display:grid;\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 1fr auto;\n        min-height: 80vh;\n        grid-column-gap: 48px;\n        grid-row-gap: 64px;\n      }\n      @media (max-width: 640px) {\n        #app {\n          padding:32px 5vw !important;\n        }\n      }\n\n\n      @media (max-width: 640px) {\n        #grid-box {\n          grid-template-columns: 1fr !important;\n        }\n      }\n      @media (min-width: 740px) {\n        #grid-box {\n          grid-template-columns: 1fr 1fr !important;\n      \n        }\n      }\n      \n      @media (min-width: 1280px) {\n        #grid-box {\n          grid-template-columns: 1fr 1fr 1fr !important;\n        }\n      }\n      @import url(//fonts.googleapis.com/css?family=Montserrat:300,500);\n      .service-32 {\n      font-family: \"Montserrat\", sans-serif;\n          color: #8d97ad;\n      font-weight: 300;\n      }\n\n      .service-32 h1, .service-32 h2, .service-32 h3, .service-32 h4, .service-32 h5, .service-32 h6 {\n      color: #3e4555;\n      }\n\n      .service-32 .font-weight-medium {\n          font-weight: 500;\n      }\n\n      .service-32 .badge {\n          line-height: 14px;\n      }\n\n      .service-32 .badge-info {\n          background: #188ef4;\n      }\n\n      .service-32 .btn-info-gradiant {\n          background: #188ef4;\n          background: -webkit-linear-gradient(legacy-direction(to right), #188ef4 0%, #316ce8 100%);\n          background: -webkit-gradient(linear, left top, right top, from(#188ef4), to(#316ce8));\n          background: -webkit-linear-gradient(left, #188ef4 0%, #316ce8 100%);\n          background: -o-linear-gradient(left, #188ef4 0%, #316ce8 100%);\n          background: linear-gradient(to right, #188ef4 0%, #316ce8 100%);\n          border: 0px;\n          color: #ffffff;\n      }\n\n      .service-32 .btn-info-gradiant:hover {\n              background: #316ce8;\n          background: -webkit-linear-gradient(legacy-direction(to right), #316ce8 0%, #188ef4 100%);\n          background: -webkit-gradient(linear, left top, right top, from(#316ce8), to(#188ef4));\n          background: -webkit-linear-gradient(left, #316ce8 0%, #188ef4 100%);\n          background: -o-linear-gradient(left, #316ce8 0%, #188ef4 100%);\n          background: linear-gradient(to right, #316ce8 0%, #188ef4 100%);\n      }\n\n      .service-32 .btn-md {\n          padding: 15px 45px;\n          font-size: 16px;\n      }\n          .Selector {\n            /* Layout */\n                display: flex; flex-wrap:wrap;\n            /* Sizes */\n              box-sizing:border-box;\n              width:100%;\n                padding: 20px;\n                margin: 16px 0 48px 0;\n                \n                border-bottom:4px solid rgba(180,180,180,0.8)\n        }\n        .Selector input {\n          background-color: rgba(50,50,50,0.8);\n            /* Layout */\n                position: relative; \n            /* Reset */\n                outline: none; appearance: none; -webkit-appearance: none; -moz-appearance: none;\n            /* Sizes */\n                height:auto;border-radius: 6px; background-size: cover; padding:0px 16px; margin: 8px;\n        }\n        /* Hidden */\n        .Selector input::after { content: attr(title); display: block;}\n        /* Label */\n        .Selector input::after {\n            /* Layout */\n                position: relative; cursor: pointer; display: block; \n            /* Text */\n                font-weight:bold;\n                text-align: center; text-transform: uppercase; letter-spacing: 2px; color: #fff; font-size: 10px;\n            /* Sizes */\n                line-height:2.5; border-radius: 4px;\n        }\n        /* Hover */\n        .Selector input:hover{ background: #333;}\n        /* Active */\n        .Selector input:checked:before {\n            /* Position */\n                position: absolute; right: -10px; top: -10px;\n            /* Layout */\n                z-index: 3; content: \"\"; display:block; box-shadow: 0px 1px 3px rgba(0,0,0,0.4);\n            /* Background */\n                background: #fff; background-size: cover;\n                background-image: url(\"data:image/svg+xml;utf8,<svg enable-background='new 0 0 512 512' viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'><path fill='rgb(139, 139, 255)' d='m437.019 74.98c-48.352-48.351-112.639-74.98-181.019-74.98-68.381 0-132.668 26.629-181.02 74.98-48.351 48.352-74.98 112.64-74.98 181.02s26.629 132.667 74.98 181.019c48.352 48.352 112.64 74.981 181.02 74.981s132.667-26.629 181.019-74.98c48.352-48.353 74.981-112.64 74.981-181.02s-26.629-132.667-74.981-181.02zm-58.713 120.093-143.065 143.066c-2.929 2.929-6.768 4.393-10.606 4.393-3.839 0-7.678-1.464-10.607-4.393l-80.334-80.333c-5.858-5.857-5.858-15.354 0-21.213 5.857-5.858 15.355-5.858 21.213 0l69.728 69.727 132.458-132.46c5.857-5.858 15.355-5.858 21.213 0s5.858 15.355 0 21.213z'/></svg>\");\n            /* Sizes */\n                border-radius:15px; height: 20px; width: 20px;\n        }\n \n    `; //Append to DOM\n\n    app.appendChild(styleEl);\n    app.appendChild(menu);\n    app.appendChild(gridBox);\n  },\n  fillSelectMenu: function () {\n    const selectMenu = document.getElementById(\"tag-box\"); //const selectMenu = document.createElement(\"div\");\n    //selectMenu.id = \"tag-box\";\n    //selectMenu.className = \"Selector\";\n    //selectMenu.innerHTML = \n\n    const selectorAll = document.createElement(\"input\");\n    selectorAll.type = \"radio\";\n    selectorAll.checked = true;\n    selectorAll.setAttribute(\"title\", \"All Star\");\n    selectorAll.dataset.name = \"All Star\";\n    selectorAll.dataset.slug = \"all-star\";\n    selectorAll.setAttribute(\"name\", \"selector\"); //console.log(\"all\", selectorAll)\n    // All\n\n    selectorAll.addEventListener(\"change\", function () {\n      if (BookmarksAPI.slugify(BookmarksAPI.state) !== selectorAll.dataset.name) {\n        BookmarksAPI.state = selectorAll.dataset.name;\n        BookmarksAPI.update();\n      }\n    });\n    selectMenu.appendChild(selectorAll); // Other tags\n\n    BookmarksAPI.tags.forEach((tag, i) => {\n      //console.log(tagname)\n      const selectorEl = document.createElement(\"input\");\n      const selectorSlug = BookmarksAPI.slugify(tag.fields.name);\n      selectorEl.type = \"radio\";\n      selectorEl.setAttribute(\"name\", \"selector\");\n      selectorEl.setAttribute(\"title\", tag.fields.name);\n      selectorEl.dataset.id = tag.id;\n      selectorEl.dataset.name = tag.fields.name;\n      selectorEl.dataset.slug = selectorSlug;\n      selectorEl.addEventListener(\"change\", function () {\n        if (BookmarksAPI.slugify(BookmarksAPI.state) !== selectorEl.dataset.name) {\n          BookmarksAPI.state = selectorEl.dataset.name;\n          BookmarksAPI.update();\n        }\n      });\n      selectMenu.appendChild(selectorEl);\n    });\n  },\n  update: function () {\n    //BookmarksAPI.getActiveColor()\n    const gridBox = document.getElementById(\"grid-box\");\n    gridBox.innerHTML = ``; //console.log(\"state\", BookmarksAPI)\n\n    if (gridBox) {\n      if (this.state === \"All Star\") {\n        this.records.forEach(r => r.fields.fav === true && gridBox.appendChild(this.createRecordEl(r, \"Favourite\")));\n      } else {\n        const activeTag = this.tags.filter(t => t.fields.name === this.state)[0]; //console.log(\"active tag\", activeTag)\n\n        if (activeTag) {\n          const activeLinks = this.records.filter(r => activeTag.fields.link.includes(r.id)); //console.log(\"active tag\", activeLinks)\n\n          activeLinks.forEach(link => gridBox.appendChild(this.createRecordEl(link, activeTag.fields.name)));\n        }\n      }\n    }\n  },\n  selectHandler: function (tagEl, tagname) {\n    //console.log(\"tagEL: \", BookmarksAPI.slugify(BookmarksAPI.state))\n    if (BookmarksAPI.slugify(BookmarksAPI.state) !== tagEl.dataset.name) {\n      BookmarksAPI.state = tagname;\n      BookmarksAPI.update();\n    }\n  },\n  slugify: function (name) {\n    return name.toLowerCase().replace(\" \", \"-\");\n  },\n  createRecordEl: function (rec, activeTagName) {\n    //console.log(\"rec\", rec)\n    const box = document.createElement(\"div\");\n    box.innerHTML = `\n        <cbs-card\n            title=\"${rec.fields.title || rec.fields.name}\"\n            description=\"${rec.fields.bilgi}\"\n            url=\"${rec.fields.url}\"\n            imageUrl=\"${rec.fields.imageUrl}\"\n            tag=\"${activeTagName}\"\n            tagColor=\"${\"rgba(0,0,0,0.8)\"\n    /*BookmarksAPI.getTagColor(rec.fields.tag)*/\n    }\"\n        ></cbs-card>\n    `;\n    return box;\n  },\n  postFetch: function () {\n    //tags\n    const tagIds = [...new Set(BookmarksAPI.records.map(r => r.fields.tag[0]))];\n    const tags = tagIds.forEach(tn => {\n      const existingTags = BookmarksAPI.tags.filter(r => r.id === tn)[0].fields.name;\n      BookmarksAPI.tagNames.push(existingTags);\n    });\n    const categoryIds = [...new Set(BookmarksAPI.records.map(r => r.fields.category[0]))];\n    const categories = categoryIds.forEach(tn => {\n      const existingCategories = BookmarksAPI.categories.filter(r => r.id === tn)[0].fields.titl;\n      BookmarksAPI.categoryNames.push(existingCategories);\n    }); //console.log(\"check\", BookmarksAPI)\n  }\n};\n\n(async function () {\n  AirtableAPI.init({\n    apiKey: \"keym6ehWNZnQzpS4m\",\n    base: \"appq9CwhpYOjOv4tQ\"\n  }); //FETCH TAGS (for color)\n\n  const tagdata = await AirtableAPI.fetch(\"Tag\");\n  const existingTags = tagdata.filter(t => t.fields.link);\n  const tagNames = existingTags.map(t => t.fields.name); //console.log(\"tag\", tagNames)\n\n  if (tagdata && tagdata.length > 0) {\n    BookmarksAPI.tags = existingTags;\n    BookmarksAPI.tagNames = existingTags;\n  } // CATEGORY\n\n\n  const categorydata = await AirtableAPI.fetch(\"Category\");\n  const existingCategories = categorydata.filter(t => t.fields.link);\n  const categoryNames = existingCategories.map(c => c.fields.name); //console.log(\"category\", categorydata)\n\n  if (categorydata && categorydata.length > 0) {\n    BookmarksAPI.categories = existingCategories;\n    BookmarksAPI.categoryNames = categoryNames;\n  } // LINKS\n\n\n  const data = await AirtableAPI.fetch(\"Link\");\n  const records = data; //console.log(\"fetcher: \", records)\n\n  if (records && records.length > 0) {\n    BookmarksAPI.records = records.sort(); //BookmarksAPI.postFetch()\n\n    BookmarksAPI.createLayout();\n    BookmarksAPI.fillSelectMenu(); //BookmarksAPI.getActiveColor()\n\n    BookmarksAPI.update();\n  } //Bookmarks.fetchtags()\n\n\n  window.Bookmarks = BookmarksAPI;\n});\n\nexport default AirtableAPI;","map":null,"metadata":{},"sourceType":"module"}